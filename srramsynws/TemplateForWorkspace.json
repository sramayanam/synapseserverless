{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "srramsynws"
		},
		"RetailSalesDemoDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'RetailSalesDemoDB'"
		},
		"srramsynws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'srramsynws-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:srramsynws.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"srramsynws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://srramsynstorage.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/RetailSalesDemoDB')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('RetailSalesDemoDB_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/srramsynws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('srramsynws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/srramsynws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('srramsynws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CETAS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "USE DataExplorationDB;\nGO\n\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Lz8oq1dn';\n\nCREATE DATABASE SCOPED CREDENTIAL [WorkspaceIdentity] WITH IDENTITY = 'Managed Identity';\nGO\n\nCREATE EXTERNAL FILE FORMAT parquet_file_format\nWITH\n(  \n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n);\nGO\n\n\nCREATE EXTERNAL TABLE [dbo].taxideltatable WITH (\n        LOCATION = '/data/curatedparquet1/',\n        DATA_SOURCE = ContosoLake,\n        FILE_FORMAT = parquet_file_format\n) AS\nSELECT * FROM dbo.GreenTaxiCleansed;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataExplorationDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CreateView')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "DROP VIEW IF EXISTS GreenTaxiCleansed;\nGO\nCREATE VIEW GreenTaxiCleansed AS\nSELECT \nTOP 10000\nCASE WHEN t.VendorID = 2 THEN 'VeriFone Inc.' ELSE 'Creative Mobile Technologies' END as VendorName,\nYEAR(t.lpep_pickup_datetime) yr,\nMONTH(t.lpep_pickup_datetime) mo,\nDAY(t.lpep_pickup_datetime) pdy,\nDATEPART(HOUR,t.lpep_pickup_datetime) phr,\nDAY(t.lpep_dropoff_datetime) ddy,\nDATEPART(HOUR,t.lpep_dropoff_datetime) dhr,\nCASE \nWHEN t.RatecodeID = 1 THEN 'Standard rate' \nWHEN t.RatecodeID = 2 THEN 'JFK' \nWHEN t.RatecodeID = 3 THEN 'Newark' \nWHEN t.RatecodeID = 4 THEN 'Nassau or WestChester' \nWHEN t.RatecodeID = 5 THEN 'Negotiatied Fare' \nELSE 'Group Ride' END as RateCode,\nCASE \nWHEN t.payment_type = 1 THEN 'Credit Card' \nWHEN t.payment_type = 2 THEN 'Cash' \nWHEN t.payment_type = 3 THEN 'No charge' \nWHEN t.payment_type = 4 THEN 'Dispute' \nWHEN t.payment_type = 5 THEN 'Unkown' \nELSE 'Voided Trip' END as PaymentType,\nCASE WHEN t.trip_type=1 THEN 'Street-hail' ELSE 'Dispatch' END as TripType ,\nl.Borough as pickupborough, \nl.Zone as pickupzone, \nl.service_zone as pickupservicezone, \nl1.Borough as dropoffborough, \nl1.Zone dropoffzone, \nl1.service_zone dropoffservicezone,\nt.passenger_count,\nt.trip_distance ,\nt.fare_amount\t,\nt.extra ,\nt.mta_tax\t,\nt.tip_amount ,\nt.total_amount\nFROM\n    dbo.taxidata t\n    LEFT JOIN\n    dbo.location l\n    on t.PULocationID = l.LocationID\n    LEFT JOIN\n    dbo.location l1\n    on t.DOLocationID = l1.LocationID;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataExplorationDB1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL FILE FORMAT DeltaLakeFormat\nWITH (  \n    FORMAT_TYPE = DELTA\n);\nGO\n\n\nSELECT         \nMONTH(lpep_pickup_datetime) AS mo ,\npassenger_count,\nCOUNT(*) AS cnt\nFROM OPENROWSET(\n\n            BULK '/data/parquetfiles',\n            DATA_SOURCE = 'ContosoLake',\n            FORMAT = 'DELTA'\n    ) nyc\nWHERE MONTH(lpep_pickup_datetime) IN (8,9,10)\nGROUP BY\nMONTH(lpep_pickup_datetime),\npassenger_count",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataExplorationDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LocalDatabaseUserAccess')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "--CREATE a database scoped credential and run in the database u created\nCREATE DATABASE SCOPED CREDENTIAL [storage_credential] WITH IDENTITY='Managed Identity';\nGO\n--Create an external data source that uses the database scoped credential\nCREATE EXTERNAL DATA SOURCE ContosoLake1 WITH ( LOCATION = 'https://srramsynstorage.dfs.core.windows.net',CREDENTIAL = storage_credential);\nGO\n\n--You have to use the Credential created above in the external data source to access the storage or create an external table else the query fails\nSELECT\n    TOP 100 *,result.filepath(1)\nFROM\n    OPENROWSET(\n            BULK '/data/parquetfiles/green_tripdata_*.*',\n            DATA_SOURCE = 'ContosoLake1',\n            FORMAT='PARQUET'\n    ) AS [result];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Paritioning')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE VIEW TaxiPartitioningView AS\nSELECT\nresult.*,result.filepath(1) as yearmonth\nFROM\n    OPENROWSET(\n            BULK '/data/parquetfiles/green_tripdata_*.*',\n            DATA_SOURCE='ContosoLake1',\n            FORMAT='PARQUET'\n    ) AS [result]\nwhere result.filepath(1) = '2022-11';\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataExplorationDB1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QueryingParquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT COUNT(*)\nFROM \nOPENROWSET(\nBULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/green/puYear=*/puMonth=*/*.parquet',\nFORMAT='PARQUET'\n) t\n\nCREATE DATABASE DataExplorationDB \n                COLLATE Latin1_General_100_BIN2_UTF8;\n\n\nUSE DataExplorationDB;\n\nCREATE DATABASE SCOPED CREDENTIAL [storage_credential] WITH IDENTITY='Managed Identity';\nGO\nCREATE EXTERNAL DATA SOURCE ContosoLake1 WITH ( LOCATION = 'https://srramsynstorage.dfs.core.windows.net',CREDENTIAL = storage_credential);\nGO\n\n\n\n\nGRANT ADMINISTER DATABASE BULK OPERATIONS TO data_explorer;\nGO\n\nALTER ROLE db_datareader\n\tADD MEMBER data_explorer;  \nGO\n\nCREATE EXTERNAL FILE FORMAT ParquetFormat\n    WITH (\n        FORMAT_TYPE = PARQUET\n    );\nGO\n\nSELECT\n    TOP 100 *,result.filepath(1)\nFROM\n    OPENROWSET(\n            BULK '/data/parquetfiles/green_tripdata_*.*',\n            DATA_SOURCE = 'ContosoLake',\n            FORMAT='PARQUET'\n    ) AS [result];\n\nDROP EXTERNAL TABLE dbo.taxidata;\nCREATE EXTERNAL TABLE dbo.taxidata\n(\nVendorID INT,\nlpep_pickup_datetime DATETIME2,\nlpep_dropoff_datetime DATETIME2,\nstore_and_fwd_flag\tVARCHAR(2),\nRatecodeID\tfloat,\nPULocationID INT,\nDOLocationID INT,\npassenger_count\tfloat,\ntrip_distance float,\nfare_amount\tfloat,\nextra float,\nmta_tax\tfloat,\ntip_amount float,\ntolls_amount float,\nehail_fee VARCHAR(10),\nimprovement_surcharge float,\ntotal_amount float,\npayment_type float,\t\ntrip_type float,\ncongestion_surcharge float\n)\nWITH\n(\n    LOCATION='data/parquetfiles/green_tripdata_*.parquet',\n    DATA_SOURCE=ContosoLake,\n    FILE_FORMAT=ParquetFormat\n);\nGO\n\nSELECT TOP 100 * FROM dbo.taxidata;\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'data/parquetfiles/green_tripdata_2022-08.parquet',\n        DATA_SOURCE='ContosoLake',\n        FORMAT='PARQUET'\n    ) AS [result];\n\n\n\n-- query the table\n\n\nSELECT TOP 100 *\nFROM OPENROWSET(\n    BULK 'https://srramsynstorage.dfs.core.windows.net/data/parquetfiles/*.*',\n    FORMAT = 'parquet') AS rows\n\n\nDROP EXTERNAL TABLE dbo.taxidata1;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataExplorationDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadJson')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select\nid,\nCASE WHEN parent1 IS NULL THEN concat(parent1fname,' ',parent1lname) ELSE parent1 END Parent1Name,\nCASE WHEN parent2 IS NULL THEN concat(parent2fname,' ',parent2lname) ELSE parent2 END Parent2Name\nfrom openrowset(\n        bulk 'https://srramsynstorage.blob.core.windows.net/data/jsonl/families.jsonl',\n                format='csv', fieldterminator ='0x0b', fieldquote = '0x0b'\n    ) with (doc nvarchar(max)) as rows\ncross apply openjson (doc)\n        with (  \n                id varchar(100),\n                parent1 varchar(25) '$.parents[0].firstName',\n                parent2 varchar(25) '$.parents[1].firstName',\n                parent1fname varchar(25) '$.parents[0].familyName',\n                parent1lname varchar(25) '$.parents[0].givenName',\n                parent2fname varchar(25) '$.parents[1].familyName',\n                parent2lname varchar(25) '$.parents[1].givenName'\n                )",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataExplorationDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadMasterData')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\nTOP 100 *\nFROM\n    OPENROWSET(\n            BULK '/data/csvfiles/taxi_zone_lookup.csv',\n            DATA_SOURCE = 'ContosoLake1',\n            FORMAT='csv',\n            PARSER_VERSION = '2.0'\n    ) AS [location];\n\nDROP EXTERNAL FILE FORMAT CsvFormat;\nCREATE EXTERNAL FILE FORMAT CsvFormat\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS(\n            FIELD_TERMINATOR = ',',\n            STRING_DELIMITER = '\"',\n            FIRST_ROW = 2\n        )\n    );\nGO\n\nDROP EXTERNAL TABLE dbo.location;\nCREATE EXTERNAL TABLE dbo.location\n(\n         LocationID INT,\n         Borough VARCHAR(50),\n         Zone VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8,\n         service_zone VARCHAR(50) COLLATE Latin1_General_100_BIN2_UTF8\n)\nWITH\n(\n    LOCATION='/data/csvfiles/taxi_zone_lookup.csv',\n    DATA_SOURCE=ContosoLake1,\n    FILE_FORMAT=CsvFormat\n);\nGO\n\nSELECT TOP 100 * from  dbo.location\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataExplorationDB1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE DATABASE DataExplorationDB1 \n                COLLATE Latin1_General_100_BIN2_UTF8;\n\n\nUSE DataExplorationDB1;\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Lz8oq1dn';\nGO\nCREATE DATABASE SCOPED CREDENTIAL [storage_credential] WITH IDENTITY='Managed Identity';\nGO\nCREATE EXTERNAL DATA SOURCE ContosoLake1 WITH ( LOCATION = 'https://srramsynstorage.dfs.core.windows.net',CREDENTIAL = storage_credential);\nGO\n\nCREATE EXTERNAL FILE FORMAT ParquetFormat\n    WITH (\n        FORMAT_TYPE = PARQUET\n    );\nGO\n\nSELECT\n    TOP 100 *,result.filepath(1) as YearMonth\nFROM\n    OPENROWSET(\n            BULK '/data/parquetfiles/green_tripdata_*.*',\n            DATA_SOURCE = 'ContosoLake1',\n            FORMAT='PARQUET'\n    ) AS [result]\n;\n\nDROP EXTERNAL TABLE dbo.taxidata;\nCREATE EXTERNAL TABLE dbo.taxidata\n(\nVendorID INT,\nlpep_pickup_datetime DATETIME2,\nlpep_dropoff_datetime DATETIME2,\nstore_and_fwd_flag\tVARCHAR(2),\nRatecodeID\tfloat,\nPULocationID INT,\nDOLocationID INT,\npassenger_count\tfloat,\ntrip_distance float,\nfare_amount\tfloat,\nextra float,\nmta_tax\tfloat,\ntip_amount float,\ntolls_amount float,\nehail_fee VARCHAR(10),\nimprovement_surcharge float,\ntotal_amount float,\npayment_type float,\t\ntrip_type float,\ncongestion_surcharge float\n)\nWITH\n(\n    LOCATION='data/parquetfiles/green_tripdata_*.parquet',\n    DATA_SOURCE=ContosoLake,\n    FILE_FORMAT=ParquetFormat\n);\nGO\n\nSELECT TOP 100 * FROM dbo.taxidata;\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'data/parquetfiles/green_tripdata_2022-08.parquet',\n        DATA_SOURCE='ContosoLake',\n        FORMAT='PARQUET'\n    ) AS [result];\n\n\n\n-- query the table\n\n\nSELECT TOP 100 *\nFROM OPENROWSET(\n    BULK 'https://srramsynstorage.dfs.core.windows.net/data/parquetfiles/*.*',\n    FORMAT = 'parquet') AS rows\n\n\nSELECT COUNT(*)\nFROM \nOPENROWSET(\nBULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/green/puYear=*/puMonth=*/*.parquet',\nFORMAT='PARQUET'\n) t",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataExplorationDB1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [VendorName]\n,[yr]\n,[mo]\n,[pdy]\n,[phr]\n,[ddy]\n,[fare_amount]\n,[extra]\n,[mta_tax]\n,[tip_amount]\n,[total_amount]\n,[pickupservicezone]\n,[dropoffborough]\n,[dropoffzone]\n,[dropoffservicezone]\n,[passenger_count]\n,[trip_distance]\n,[dhr]\n,[RateCode]\n,[PaymentType]\n,[TripType]\n,[pickupborough]\n,[pickupzone]\n FROM [dbo].[GreenTaxiCleansed]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataExplorationDB1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SharedSparkTables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT * FROM dbo.sharedsparkproducts ;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sreelakedb",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SynapseLink')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/* Run the SynapseSparkBatchIngestion notebook before executing the following queries */\n\nSELECT TOP 10 *\nFROM OPENROWSET(\n      PROVIDER = 'CosmosDB',\n      CONNECTION = 'Account=srramcosmosdb;Database=RetailSalesDemoDB',\n      OBJECT = 'RetailSales',\n      SERVER_CREDENTIAL = 'MyCosmosDbAccountCredential'\n    ) as rows",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataExplorationDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/createusersadmin')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE LOGIN data_explorer WITH PASSWORD = 'Lz8oq1dn';\nCREATE LOGIN data_user WITH PASSWORD = 'Lz8oq1dn';\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Lz8oq1dn';\nGRANT ALTER ANY CREDENTIAL TO data_user;\nCREATE DATABASE SCOPED CREDENTIAL [storage_credential] WITH IDENTITY='Managed Identity';\nGO\nGRANT REFERENCES ON CREDENTIAL::[storage_credential] TO data_user;\nGO\n\n\nCREATE CREDENTIAL MyCosmosDbAccountCredential\n    WITH IDENTITY = 'SHARED ACCESS SIGNATURE', SECRET = 'xw4e0bEjHVGK3AtgQlBtMUKzX3OZx1Wu7Dwdww96CVuM4k30lAnj5zjXNmqHvw6FpEisYh5zTfM2ACDbU69O9g==';\n\n\nGRANT CONNECT ANY DATABASE to [login@contoso.com];\nGRANT SELECT ALL USER SECURABLES to [login@contoso.com];\n\nCREATE USER data_user FOR LOGIN data_user;\nGO\n\nALTER ROLE db_owner ADD member data_user;\nGO\n\nCREATE DATABASE SCOPED CREDENTIAL SynapseIdentity WITH IDENTITY = 'Managed Identity';\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/statistics')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE STATISTICS stat_payment_type ON dbo.taxidata(payment_type);\n\nSELECT payment_type,count(*)\nFROM\ndbo.taxidata\ngroup by \npayment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "DataExplorationDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SynapseSparkBatchIngestion')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "mysparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e4be08ab-b8dd-4af7-b4da-24ed383c150d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a5dc76bb-fb9c-460f-bc90-a9dd011b12ca/resourceGroups/rg-analytics/providers/Microsoft.Synapse/workspaces/srramsynws/bigDataPools/mysparkpool",
						"name": "mysparkpool",
						"type": "Spark",
						"endpoint": "https://srramsynws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mysparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"automaticScaleJobs": true
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"### Let's load the data into Spark DataFrames from the Storage Location."
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"dfStoreDemoGraphics = (spark\n",
							"                .read\n",
							"                .csv(\"/RetailData/StoreDemoGraphics.csv\", header=True, inferSchema='true')\n",
							"              )\n",
							"\n",
							"dfRetailSales = (spark\n",
							"                .read\n",
							"                .csv(\"/RetailData/RetailSales.csv\", header=True, inferSchema='true')\n",
							"              )\n",
							"\n",
							"dfProduct = (spark\n",
							"                .read\n",
							"                .csv(\"/RetailData/Products.csv\", header=True, inferSchema='true')\n",
							"              )"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Let's Create a spark database"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"CREATE DATABASE IF NOT EXISTS sreelakedb\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Load the data from Spark data Frame to Lake Database Tables"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfRetailSales.write.mode(\"overwrite\").saveAsTable(\"sreelakedb.RetailSales\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfStoreDemoGraphics.write.mode(\"overwrite\").saveAsTable(\"sreelakedb.StoreDemoGraphics\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfProduct.write.mode(\"overwrite\").saveAsTable(\"sreelakedb.Products\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"### First create a Cosmos DB with RetailSalesDemoDB and create three collections called 1. Retail Sales 2. StoreDemographics 3. Products\n",
							"### Write the Spark Dataframe to the Azure Cosmos DB Collections\n",
							"\n",
							"#### The \"cosmos.oltp\" is the Spark format that enables connection to the Cosmos DB Transactional store.\n",
							"\n",
							"#### Also enable Synapse link on these three containers to read data from the analytical containers. The linked service shows three analytic containers ready to be queried as part of the lab"
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"dfRetailSales.write\\\n",
							"            .format(\"cosmos.oltp\")\\\n",
							"            .option(\"spark.synapse.linkedService\", \"RetailSalesDemoDB\")\\\n",
							"            .option(\"spark.cosmos.container\", \"RetailSales\")\\\n",
							"            .mode('append')\\\n",
							"            .save()\n",
							"\n",
							"dfStoreDemoGraphics.write\\\n",
							"            .format(\"cosmos.oltp\")\\\n",
							"            .option(\"spark.synapse.linkedService\", \"RetailSalesDemoDB\")\\\n",
							"            .option(\"spark.cosmos.container\", \"StoreDemoGraphics\")\\\n",
							"            .mode('append')\\\n",
							"            .save()\n",
							"\n",
							"\n",
							"dfProduct.write\\\n",
							"            .format(\"cosmos.oltp\")\\\n",
							"            .option(\"spark.synapse.linkedService\", \"RetailSalesDemoDB\")\\\n",
							"            .option(\"spark.cosmos.container\", \"Products\")\\\n",
							"            .mode('append')\\\n",
							"            .save()     \n",
							""
						],
						"outputs": [],
						"execution_count": 8
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CreateSampleDeltaLakeFiles')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "mysparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "997f1653-6f3d-4bf4-b41d-53bb95bcc336"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a5dc76bb-fb9c-460f-bc90-a9dd011b12ca/resourceGroups/rg-analytics/providers/Microsoft.Synapse/workspaces/srramsynws/bigDataPools/mysparkpool",
						"name": "mysparkpool",
						"type": "Spark",
						"endpoint": "https://srramsynws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mysparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"automaticScaleJobs": true
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"from delta.tables import DeltaTable\n",
							"deltaTable = DeltaTable.convertToDelta(spark, \"parquet.`abfss://data@srramsynstorage.dfs.core.windows.net/parquetfiles`\")"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CreateServerlessTables')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "mysparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "9f678fd8-59f6-4c8d-a66e-0535932aa651"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a5dc76bb-fb9c-460f-bc90-a9dd011b12ca/resourceGroups/rg-analytics/providers/Microsoft.Synapse/workspaces/srramsynws/bigDataPools/mysparkpool",
						"name": "mysparkpool",
						"type": "Spark",
						"endpoint": "https://srramsynws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mysparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"automaticScaleJobs": true
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"CREATE TABLE sreelakedb.sharedsparkproducts\n",
							"    USING Parquet\n",
							"    LOCATION \"abfss://data@srramsynstorage.dfs.core.windows.net/synapse/workspaces/srramsynws/warehouse/sreelakedb.db/products/\""
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mysparkpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 15,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		}
	]
}